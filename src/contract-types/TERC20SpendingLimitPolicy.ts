/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TERC20SpendingLimitPolicyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkAction"
      | "initializeWithMultiplexer"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PolicySet" | "TokenSpent"): EventFragment;

  encodeFunctionData(
    functionFragment: "checkAction",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeWithMultiplexer",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeWithMultiplexer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace PolicySetEvent {
  export type InputTuple = [
    id: BytesLike,
    multiplexer: AddressLike,
    account: AddressLike
  ];
  export type OutputTuple = [id: string, multiplexer: string, account: string];
  export interface OutputObject {
    id: string;
    multiplexer: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSpentEvent {
  export type InputTuple = [
    id: BytesLike,
    multiplexer: AddressLike,
    token: AddressLike,
    account: AddressLike,
    amount: BigNumberish,
    remaining: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    multiplexer: string,
    token: string,
    account: string,
    amount: bigint,
    remaining: bigint
  ];
  export interface OutputObject {
    id: string;
    multiplexer: string;
    token: string;
    account: string;
    amount: bigint;
    remaining: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TERC20SpendingLimitPolicy extends BaseContract {
  connect(runner?: ContractRunner | null): TERC20SpendingLimitPolicy;
  waitForDeployment(): Promise<this>;

  interface: TERC20SpendingLimitPolicyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkAction: TypedContractMethod<
    [
      id: BytesLike,
      account: AddressLike,
      target: AddressLike,
      value: BigNumberish,
      callData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  initializeWithMultiplexer: TypedContractMethod<
    [account: AddressLike, configId: BytesLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkAction"
  ): TypedContractMethod<
    [
      id: BytesLike,
      account: AddressLike,
      target: AddressLike,
      value: BigNumberish,
      callData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeWithMultiplexer"
  ): TypedContractMethod<
    [account: AddressLike, configId: BytesLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceID: BytesLike], [boolean], "view">;

  getEvent(
    key: "PolicySet"
  ): TypedContractEvent<
    PolicySetEvent.InputTuple,
    PolicySetEvent.OutputTuple,
    PolicySetEvent.OutputObject
  >;
  getEvent(
    key: "TokenSpent"
  ): TypedContractEvent<
    TokenSpentEvent.InputTuple,
    TokenSpentEvent.OutputTuple,
    TokenSpentEvent.OutputObject
  >;

  filters: {
    "PolicySet(bytes32,address,address)": TypedContractEvent<
      PolicySetEvent.InputTuple,
      PolicySetEvent.OutputTuple,
      PolicySetEvent.OutputObject
    >;
    PolicySet: TypedContractEvent<
      PolicySetEvent.InputTuple,
      PolicySetEvent.OutputTuple,
      PolicySetEvent.OutputObject
    >;

    "TokenSpent(bytes32,address,address,address,uint256,uint256)": TypedContractEvent<
      TokenSpentEvent.InputTuple,
      TokenSpentEvent.OutputTuple,
      TokenSpentEvent.OutputObject
    >;
    TokenSpent: TypedContractEvent<
      TokenSpentEvent.InputTuple,
      TokenSpentEvent.OutputTuple,
      TokenSpentEvent.OutputObject
    >;
  };
}
