/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type EmergencyUninstallStruct = {
  hook: AddressLike;
  hookType: BigNumberish;
  deInitData: BytesLike;
  nonce: BigNumberish;
};

export type EmergencyUninstallStructOutput = [
  hook: string,
  hookType: bigint,
  deInitData: string,
  nonce: bigint
] & { hook: string; hookType: bigint; deInitData: string; nonce: bigint };

export type PackedUserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  accountGasLimits: BytesLike;
  preVerificationGas: BigNumberish;
  gasFees: BytesLike;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type PackedUserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  accountGasLimits: string,
  preVerificationGas: bigint,
  gasFees: string,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  accountGasLimits: string;
  preVerificationGas: bigint;
  gasFees: string;
  paymasterAndData: string;
  signature: string;
};

export type ModuleInitStruct = {
  module: AddressLike;
  initData: BytesLike;
  moduleType: BigNumberish;
};

export type ModuleInitStructOutput = [
  module: string,
  initData: string,
  moduleType: bigint
] & { module: string; initData: string; moduleType: bigint };

export type RegistryInitStruct = {
  registry: AddressLike;
  attesters: AddressLike[];
  threshold: BigNumberish;
};

export type RegistryInitStructOutput = [
  registry: string,
  attesters: string[],
  threshold: bigint
] & { registry: string; attesters: string[]; threshold: bigint };

export interface ISafe7579Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountId"
      | "domainSeparator"
      | "emergencyUninstallHook"
      | "execute"
      | "executeFromExecutor"
      | "getActiveHook"
      | "getExecutorsPaginated"
      | "getFallbackHandlerBySelector"
      | "getNonce"
      | "getPrevalidationHook"
      | "getSafeOp"
      | "getValidatorsPaginated"
      | "initializeAccount"
      | "initializeAccountWithValidators"
      | "installModule"
      | "isModuleInstalled"
      | "isValidSignature"
      | "setRegistry"
      | "supportsExecutionMode"
      | "supportsModule"
      | "uninstallModule"
      | "validateUserOp"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ERC7484RegistryConfigured"
      | "EmergencyHookUninstallRequest"
      | "EmergencyHookUninstallRequestReset"
      | "ModuleInstalled"
      | "ModuleUninstalled"
  ): EventFragment;

  encodeFunctionData(functionFragment: "accountId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUninstallHook",
    values: [EmergencyUninstallStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFromExecutor",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorsPaginated",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFallbackHandlerBySelector",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrevalidationHook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSafeOp",
    values: [PackedUserOperationStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsPaginated",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeAccount",
    values: [ModuleInitStruct[], RegistryInitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeAccountWithValidators",
    values: [ModuleInitStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "installModule",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleInstalled",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [AddressLike, AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsExecutionMode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsModule",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallModule",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [PackedUserOperationStruct, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accountId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUninstallHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeFromExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackHandlerBySelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrevalidationHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSafeOp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeAccountWithValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isModuleInstalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsExecutionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
}

export namespace ERC7484RegistryConfiguredEvent {
  export type InputTuple = [smartAccount: AddressLike, registry: AddressLike];
  export type OutputTuple = [smartAccount: string, registry: string];
  export interface OutputObject {
    smartAccount: string;
    registry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyHookUninstallRequestEvent {
  export type InputTuple = [hook: AddressLike, time: BigNumberish];
  export type OutputTuple = [hook: string, time: bigint];
  export interface OutputObject {
    hook: string;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyHookUninstallRequestResetEvent {
  export type InputTuple = [hook: AddressLike, time: BigNumberish];
  export type OutputTuple = [hook: string, time: bigint];
  export interface OutputObject {
    hook: string;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleInstalledEvent {
  export type InputTuple = [moduleTypeId: BigNumberish, module: AddressLike];
  export type OutputTuple = [moduleTypeId: bigint, module: string];
  export interface OutputObject {
    moduleTypeId: bigint;
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleUninstalledEvent {
  export type InputTuple = [moduleTypeId: BigNumberish, module: AddressLike];
  export type OutputTuple = [moduleTypeId: bigint, module: string];
  export interface OutputObject {
    moduleTypeId: bigint;
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISafe7579 extends BaseContract {
  connect(runner?: ContractRunner | null): ISafe7579;
  waitForDeployment(): Promise<this>;

  interface: ISafe7579Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountId: TypedContractMethod<[], [string], "view">;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  emergencyUninstallHook: TypedContractMethod<
    [data: EmergencyUninstallStruct, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  execute: TypedContractMethod<
    [mode: BytesLike, executionCalldata: BytesLike],
    [void],
    "nonpayable"
  >;

  executeFromExecutor: TypedContractMethod<
    [mode: BytesLike, executionCalldata: BytesLike],
    [string[]],
    "nonpayable"
  >;

  getActiveHook: TypedContractMethod<[], [string], "view">;

  getExecutorsPaginated: TypedContractMethod<
    [cursor: AddressLike, size: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;

  getFallbackHandlerBySelector: TypedContractMethod<
    [selector: BytesLike],
    [[string, string]],
    "view"
  >;

  getNonce: TypedContractMethod<
    [safe: AddressLike, validator: AddressLike],
    [bigint],
    "view"
  >;

  getPrevalidationHook: TypedContractMethod<
    [moduleType: BigNumberish],
    [string],
    "view"
  >;

  getSafeOp: TypedContractMethod<
    [userOp: PackedUserOperationStruct, entryPoint: AddressLike],
    [
      [string, bigint, bigint, string] & {
        operationData: string;
        validAfter: bigint;
        validUntil: bigint;
        signatures: string;
      }
    ],
    "view"
  >;

  getValidatorsPaginated: TypedContractMethod<
    [cursor: AddressLike, pageSize: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;

  initializeAccount: TypedContractMethod<
    [modules: ModuleInitStruct[], registryInit: RegistryInitStruct],
    [void],
    "nonpayable"
  >;

  initializeAccountWithValidators: TypedContractMethod<
    [validators: ModuleInitStruct[]],
    [void],
    "nonpayable"
  >;

  installModule: TypedContractMethod<
    [moduleType: BigNumberish, module: AddressLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;

  isModuleInstalled: TypedContractMethod<
    [
      moduleType: BigNumberish,
      module: AddressLike,
      additionalContext: BytesLike
    ],
    [boolean],
    "view"
  >;

  isValidSignature: TypedContractMethod<
    [hash: BytesLike, data: BytesLike],
    [string],
    "view"
  >;

  setRegistry: TypedContractMethod<
    [registry: AddressLike, attesters: AddressLike[], threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsExecutionMode: TypedContractMethod<
    [encodedMode: BytesLike],
    [boolean],
    "view"
  >;

  supportsModule: TypedContractMethod<
    [moduleTypeId: BigNumberish],
    [boolean],
    "view"
  >;

  uninstallModule: TypedContractMethod<
    [moduleType: BigNumberish, module: AddressLike, deInitData: BytesLike],
    [void],
    "nonpayable"
  >;

  validateUserOp: TypedContractMethod<
    [
      userOp: PackedUserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyUninstallHook"
  ): TypedContractMethod<
    [data: EmergencyUninstallStruct, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [mode: BytesLike, executionCalldata: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeFromExecutor"
  ): TypedContractMethod<
    [mode: BytesLike, executionCalldata: BytesLike],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveHook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getExecutorsPaginated"
  ): TypedContractMethod<
    [cursor: AddressLike, size: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFallbackHandlerBySelector"
  ): TypedContractMethod<[selector: BytesLike], [[string, string]], "view">;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<
    [safe: AddressLike, validator: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrevalidationHook"
  ): TypedContractMethod<[moduleType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getSafeOp"
  ): TypedContractMethod<
    [userOp: PackedUserOperationStruct, entryPoint: AddressLike],
    [
      [string, bigint, bigint, string] & {
        operationData: string;
        validAfter: bigint;
        validUntil: bigint;
        signatures: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorsPaginated"
  ): TypedContractMethod<
    [cursor: AddressLike, pageSize: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeAccount"
  ): TypedContractMethod<
    [modules: ModuleInitStruct[], registryInit: RegistryInitStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeAccountWithValidators"
  ): TypedContractMethod<
    [validators: ModuleInitStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "installModule"
  ): TypedContractMethod<
    [moduleType: BigNumberish, module: AddressLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isModuleInstalled"
  ): TypedContractMethod<
    [
      moduleType: BigNumberish,
      module: AddressLike,
      additionalContext: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<[hash: BytesLike, data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "setRegistry"
  ): TypedContractMethod<
    [registry: AddressLike, attesters: AddressLike[], threshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsExecutionMode"
  ): TypedContractMethod<[encodedMode: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsModule"
  ): TypedContractMethod<[moduleTypeId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "uninstallModule"
  ): TypedContractMethod<
    [moduleType: BigNumberish, module: AddressLike, deInitData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateUserOp"
  ): TypedContractMethod<
    [
      userOp: PackedUserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "ERC7484RegistryConfigured"
  ): TypedContractEvent<
    ERC7484RegistryConfiguredEvent.InputTuple,
    ERC7484RegistryConfiguredEvent.OutputTuple,
    ERC7484RegistryConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyHookUninstallRequest"
  ): TypedContractEvent<
    EmergencyHookUninstallRequestEvent.InputTuple,
    EmergencyHookUninstallRequestEvent.OutputTuple,
    EmergencyHookUninstallRequestEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyHookUninstallRequestReset"
  ): TypedContractEvent<
    EmergencyHookUninstallRequestResetEvent.InputTuple,
    EmergencyHookUninstallRequestResetEvent.OutputTuple,
    EmergencyHookUninstallRequestResetEvent.OutputObject
  >;
  getEvent(
    key: "ModuleInstalled"
  ): TypedContractEvent<
    ModuleInstalledEvent.InputTuple,
    ModuleInstalledEvent.OutputTuple,
    ModuleInstalledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleUninstalled"
  ): TypedContractEvent<
    ModuleUninstalledEvent.InputTuple,
    ModuleUninstalledEvent.OutputTuple,
    ModuleUninstalledEvent.OutputObject
  >;

  filters: {
    "ERC7484RegistryConfigured(address,address)": TypedContractEvent<
      ERC7484RegistryConfiguredEvent.InputTuple,
      ERC7484RegistryConfiguredEvent.OutputTuple,
      ERC7484RegistryConfiguredEvent.OutputObject
    >;
    ERC7484RegistryConfigured: TypedContractEvent<
      ERC7484RegistryConfiguredEvent.InputTuple,
      ERC7484RegistryConfiguredEvent.OutputTuple,
      ERC7484RegistryConfiguredEvent.OutputObject
    >;

    "EmergencyHookUninstallRequest(address,uint256)": TypedContractEvent<
      EmergencyHookUninstallRequestEvent.InputTuple,
      EmergencyHookUninstallRequestEvent.OutputTuple,
      EmergencyHookUninstallRequestEvent.OutputObject
    >;
    EmergencyHookUninstallRequest: TypedContractEvent<
      EmergencyHookUninstallRequestEvent.InputTuple,
      EmergencyHookUninstallRequestEvent.OutputTuple,
      EmergencyHookUninstallRequestEvent.OutputObject
    >;

    "EmergencyHookUninstallRequestReset(address,uint256)": TypedContractEvent<
      EmergencyHookUninstallRequestResetEvent.InputTuple,
      EmergencyHookUninstallRequestResetEvent.OutputTuple,
      EmergencyHookUninstallRequestResetEvent.OutputObject
    >;
    EmergencyHookUninstallRequestReset: TypedContractEvent<
      EmergencyHookUninstallRequestResetEvent.InputTuple,
      EmergencyHookUninstallRequestResetEvent.OutputTuple,
      EmergencyHookUninstallRequestResetEvent.OutputObject
    >;

    "ModuleInstalled(uint256,address)": TypedContractEvent<
      ModuleInstalledEvent.InputTuple,
      ModuleInstalledEvent.OutputTuple,
      ModuleInstalledEvent.OutputObject
    >;
    ModuleInstalled: TypedContractEvent<
      ModuleInstalledEvent.InputTuple,
      ModuleInstalledEvent.OutputTuple,
      ModuleInstalledEvent.OutputObject
    >;

    "ModuleUninstalled(uint256,address)": TypedContractEvent<
      ModuleUninstalledEvent.InputTuple,
      ModuleUninstalledEvent.OutputTuple,
      ModuleUninstalledEvent.OutputObject
    >;
    ModuleUninstalled: TypedContractEvent<
      ModuleUninstalledEvent.InputTuple,
      ModuleUninstalledEvent.OutputTuple,
      ModuleUninstalledEvent.OutputObject
    >;
  };
}
