/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ISafeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "VERSION"
      | "checkSignatures"
      | "domainSeparator"
      | "enableModule"
      | "execTransactionFromModule"
      | "execTransactionFromModuleReturnData"
      | "getModulesPaginated"
      | "getStorageAt"
      | "setFallbackHandler"
      | "setup"
      | "signedMessages"
      | "simulateAndRevert"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkSignatures",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStorageAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFallbackHandler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      AddressLike[],
      BigNumberish,
      AddressLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateAndRevert",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStorageAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateAndRevert",
    data: BytesLike
  ): Result;
}

export interface ISafe extends BaseContract {
  connect(runner?: ContractRunner | null): ISafe;
  waitForDeployment(): Promise<this>;

  interface: ISafeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VERSION: TypedContractMethod<[], [string], "view">;

  checkSignatures: TypedContractMethod<
    [dataHash: BytesLike, data: BytesLike, signatures: BytesLike],
    [void],
    "view"
  >;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  enableModule: TypedContractMethod<
    [module: AddressLike],
    [void],
    "nonpayable"
  >;

  execTransactionFromModule: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  execTransactionFromModuleReturnData: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [[boolean, string] & { success: boolean; returnData: string }],
    "nonpayable"
  >;

  getModulesPaginated: TypedContractMethod<
    [start: AddressLike, pageSize: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;

  getStorageAt: TypedContractMethod<
    [offset: BigNumberish, length: BigNumberish],
    [string],
    "view"
  >;

  setFallbackHandler: TypedContractMethod<
    [handler: AddressLike],
    [void],
    "nonpayable"
  >;

  setup: TypedContractMethod<
    [
      _owners: AddressLike[],
      _threshold: BigNumberish,
      to: AddressLike,
      data: BytesLike,
      fallbackHandler: AddressLike,
      paymentToken: AddressLike,
      payment: BigNumberish,
      paymentReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  signedMessages: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  simulateAndRevert: TypedContractMethod<
    [targetContract: AddressLike, calldataPayload: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkSignatures"
  ): TypedContractMethod<
    [dataHash: BytesLike, data: BytesLike, signatures: BytesLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "enableModule"
  ): TypedContractMethod<[module: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "execTransactionFromModule"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execTransactionFromModuleReturnData"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [[boolean, string] & { success: boolean; returnData: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getModulesPaginated"
  ): TypedContractMethod<
    [start: AddressLike, pageSize: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStorageAt"
  ): TypedContractMethod<
    [offset: BigNumberish, length: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setFallbackHandler"
  ): TypedContractMethod<[handler: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setup"
  ): TypedContractMethod<
    [
      _owners: AddressLike[],
      _threshold: BigNumberish,
      to: AddressLike,
      data: BytesLike,
      fallbackHandler: AddressLike,
      paymentToken: AddressLike,
      payment: BigNumberish,
      paymentReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signedMessages"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "simulateAndRevert"
  ): TypedContractMethod<
    [targetContract: AddressLike, calldataPayload: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
