/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type ModuleInitStruct = { module: AddressLike; initData: BytesLike };

export type ModuleInitStructOutput = [module: string, initData: string] & {
  module: string;
  initData: string;
};

export type PackedUserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  accountGasLimits: BytesLike;
  preVerificationGas: BigNumberish;
  gasFees: BytesLike;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type PackedUserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  accountGasLimits: string,
  preVerificationGas: bigint,
  gasFees: string,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  accountGasLimits: string;
  preVerificationGas: bigint;
  gasFees: string;
  paymasterAndData: string;
  signature: string;
};

export declare namespace Safe7579Launchpad {
  export type InitDataStruct = {
    singleton: AddressLike;
    owners: AddressLike[];
    threshold: BigNumberish;
    setupTo: AddressLike;
    setupData: BytesLike;
    safe7579: AddressLike;
    validators: ModuleInitStruct[];
    callData: BytesLike;
  };

  export type InitDataStructOutput = [
    singleton: string,
    owners: string[],
    threshold: bigint,
    setupTo: string,
    setupData: string,
    safe7579: string,
    validators: ModuleInitStructOutput[],
    callData: string
  ] & {
    singleton: string;
    owners: string[];
    threshold: bigint;
    setupTo: string;
    setupData: string;
    safe7579: string;
    validators: ModuleInitStructOutput[];
    callData: string;
  };
}

export interface TSafe7579LaunchpadInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "REGISTRY"
      | "SUPPORTED_ENTRYPOINT"
      | "accountId"
      | "addSafe7579"
      | "domainSeparator"
      | "getInitHash"
      | "getSafeOp"
      | "hash"
      | "initSafe7579"
      | "preValidationSetup"
      | "predictSafeAddress"
      | "setupSafe"
      | "supportsExecutionMode"
      | "supportsModule"
      | "validateUserOp"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ModuleInstalled" | "ModuleUninstalled"
  ): EventFragment;

  encodeFunctionData(functionFragment: "REGISTRY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SUPPORTED_ENTRYPOINT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accountId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addSafe7579",
    values: [
      AddressLike,
      ModuleInitStruct[],
      ModuleInitStruct[],
      ModuleInitStruct[],
      ModuleInitStruct[],
      AddressLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSafeOp",
    values: [PackedUserOperationStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [Safe7579Launchpad.InitDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initSafe7579",
    values: [
      AddressLike,
      ModuleInitStruct[],
      ModuleInitStruct[],
      ModuleInitStruct[],
      AddressLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "preValidationSetup",
    values: [BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predictSafeAddress",
    values: [AddressLike, AddressLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setupSafe",
    values: [Safe7579Launchpad.InitDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsExecutionMode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsModule",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [PackedUserOperationStruct, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "REGISTRY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SUPPORTED_ENTRYPOINT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accountId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSafe7579",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSafeOp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initSafe7579",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preValidationSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictSafeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupSafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsExecutionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
}

export namespace ModuleInstalledEvent {
  export type InputTuple = [moduleTypeId: BigNumberish, module: AddressLike];
  export type OutputTuple = [moduleTypeId: bigint, module: string];
  export interface OutputObject {
    moduleTypeId: bigint;
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleUninstalledEvent {
  export type InputTuple = [moduleTypeId: BigNumberish, module: AddressLike];
  export type OutputTuple = [moduleTypeId: bigint, module: string];
  export interface OutputObject {
    moduleTypeId: bigint;
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TSafe7579Launchpad extends BaseContract {
  connect(runner?: ContractRunner | null): TSafe7579Launchpad;
  waitForDeployment(): Promise<this>;

  interface: TSafe7579LaunchpadInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  REGISTRY: TypedContractMethod<[], [string], "view">;

  SUPPORTED_ENTRYPOINT: TypedContractMethod<[], [string], "view">;

  accountId: TypedContractMethod<[], [string], "view">;

  addSafe7579: TypedContractMethod<
    [
      safe7579: AddressLike,
      validators: ModuleInitStruct[],
      executors: ModuleInitStruct[],
      fallbacks: ModuleInitStruct[],
      hooks: ModuleInitStruct[],
      attesters: AddressLike[],
      threshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  getInitHash: TypedContractMethod<[], [string], "view">;

  getSafeOp: TypedContractMethod<
    [userOp: PackedUserOperationStruct, entryPoint: AddressLike],
    [
      [string, bigint, bigint, string] & {
        operationData: string;
        validAfter: bigint;
        validUntil: bigint;
        signatures: string;
      }
    ],
    "view"
  >;

  hash: TypedContractMethod<
    [data: Safe7579Launchpad.InitDataStruct],
    [string],
    "view"
  >;

  initSafe7579: TypedContractMethod<
    [
      safe7579: AddressLike,
      executors: ModuleInitStruct[],
      fallbacks: ModuleInitStruct[],
      hooks: ModuleInitStruct[],
      attesters: AddressLike[],
      threshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  preValidationSetup: TypedContractMethod<
    [initHash: BytesLike, to: AddressLike, preInit: BytesLike],
    [void],
    "nonpayable"
  >;

  predictSafeAddress: TypedContractMethod<
    [
      singleton: AddressLike,
      safeProxyFactory: AddressLike,
      creationCode: BytesLike,
      salt: BytesLike,
      factoryInitializer: BytesLike
    ],
    [string],
    "view"
  >;

  setupSafe: TypedContractMethod<
    [initData: Safe7579Launchpad.InitDataStruct],
    [void],
    "nonpayable"
  >;

  supportsExecutionMode: TypedContractMethod<
    [encodedMode: BytesLike],
    [boolean],
    "view"
  >;

  supportsModule: TypedContractMethod<
    [moduleTypeId: BigNumberish],
    [boolean],
    "view"
  >;

  validateUserOp: TypedContractMethod<
    [
      userOp: PackedUserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "REGISTRY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SUPPORTED_ENTRYPOINT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accountId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addSafe7579"
  ): TypedContractMethod<
    [
      safe7579: AddressLike,
      validators: ModuleInitStruct[],
      executors: ModuleInitStruct[],
      fallbacks: ModuleInitStruct[],
      hooks: ModuleInitStruct[],
      attesters: AddressLike[],
      threshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getInitHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSafeOp"
  ): TypedContractMethod<
    [userOp: PackedUserOperationStruct, entryPoint: AddressLike],
    [
      [string, bigint, bigint, string] & {
        operationData: string;
        validAfter: bigint;
        validUntil: bigint;
        signatures: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash"
  ): TypedContractMethod<
    [data: Safe7579Launchpad.InitDataStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "initSafe7579"
  ): TypedContractMethod<
    [
      safe7579: AddressLike,
      executors: ModuleInitStruct[],
      fallbacks: ModuleInitStruct[],
      hooks: ModuleInitStruct[],
      attesters: AddressLike[],
      threshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preValidationSetup"
  ): TypedContractMethod<
    [initHash: BytesLike, to: AddressLike, preInit: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "predictSafeAddress"
  ): TypedContractMethod<
    [
      singleton: AddressLike,
      safeProxyFactory: AddressLike,
      creationCode: BytesLike,
      salt: BytesLike,
      factoryInitializer: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setupSafe"
  ): TypedContractMethod<
    [initData: Safe7579Launchpad.InitDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsExecutionMode"
  ): TypedContractMethod<[encodedMode: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsModule"
  ): TypedContractMethod<[moduleTypeId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "validateUserOp"
  ): TypedContractMethod<
    [
      userOp: PackedUserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "ModuleInstalled"
  ): TypedContractEvent<
    ModuleInstalledEvent.InputTuple,
    ModuleInstalledEvent.OutputTuple,
    ModuleInstalledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleUninstalled"
  ): TypedContractEvent<
    ModuleUninstalledEvent.InputTuple,
    ModuleUninstalledEvent.OutputTuple,
    ModuleUninstalledEvent.OutputObject
  >;

  filters: {
    "ModuleInstalled(uint256,address)": TypedContractEvent<
      ModuleInstalledEvent.InputTuple,
      ModuleInstalledEvent.OutputTuple,
      ModuleInstalledEvent.OutputObject
    >;
    ModuleInstalled: TypedContractEvent<
      ModuleInstalledEvent.InputTuple,
      ModuleInstalledEvent.OutputTuple,
      ModuleInstalledEvent.OutputObject
    >;

    "ModuleUninstalled(uint256,address)": TypedContractEvent<
      ModuleUninstalledEvent.InputTuple,
      ModuleUninstalledEvent.OutputTuple,
      ModuleUninstalledEvent.OutputObject
    >;
    ModuleUninstalled: TypedContractEvent<
      ModuleUninstalledEvent.InputTuple,
      ModuleUninstalledEvent.OutputTuple,
      ModuleUninstalledEvent.OutputObject
    >;
  };
}
