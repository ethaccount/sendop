/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type PackedUserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  accountGasLimits: BytesLike;
  preVerificationGas: BigNumberish;
  gasFees: BytesLike;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type PackedUserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  accountGasLimits: string,
  preVerificationGas: bigint,
  gasFees: string,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  accountGasLimits: string;
  preVerificationGas: bigint;
  gasFees: string;
  paymasterAndData: string;
  signature: string;
};

export declare namespace ExecutorManager {
  export type ExecutorConfigStruct = { hook: AddressLike };

  export type ExecutorConfigStructOutput = [hook: string] & { hook: string };
}

export declare namespace ValidationManager {
  export type ValidationConfigStruct = {
    nonce: BigNumberish;
    hook: AddressLike;
  };

  export type ValidationConfigStructOutput = [nonce: bigint, hook: string] & {
    nonce: bigint;
    hook: string;
  };

  export type PermissionConfigStruct = {
    permissionFlag: BytesLike;
    signer: AddressLike;
    policyData: BytesLike[];
  };

  export type PermissionConfigStructOutput = [
    permissionFlag: string,
    signer: string,
    policyData: string[]
  ] & { permissionFlag: string; signer: string; policyData: string[] };
}

export declare namespace SelectorManager {
  export type SelectorConfigStruct = {
    hook: AddressLike;
    target: AddressLike;
    callType: BytesLike;
  };

  export type SelectorConfigStructOutput = [
    hook: string,
    target: string,
    callType: string
  ] & { hook: string; target: string; callType: string };
}

export interface TKernelV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountId"
      | "changeRootValidator"
      | "currentNonce"
      | "eip712Domain"
      | "entrypoint"
      | "execute"
      | "executeFromExecutor"
      | "executeUserOp"
      | "executorConfig"
      | "initialize"
      | "installModule"
      | "installValidations"
      | "invalidateNonce"
      | "isAllowedSelector"
      | "isModuleInstalled"
      | "isValidSignature"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "permissionConfig"
      | "rootValidator"
      | "selectorConfig"
      | "supportsExecutionMode"
      | "supportsModule"
      | "uninstallModule"
      | "uninstallValidation"
      | "upgradeTo"
      | "validNonceFrom"
      | "validateUserOp"
      | "validationConfig"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ModuleInstalled"
      | "ModuleUninstallResult"
      | "ModuleUninstalled"
      | "NonceInvalidated"
      | "PermissionInstalled"
      | "PermissionUninstalled"
      | "Received"
      | "RootValidatorUpdated"
      | "SelectorSet"
      | "TryExecuteUnsuccessful"
      | "Upgraded"
      | "ValidatorInstalled"
      | "ValidatorUninstalled"
  ): EventFragment;

  encodeFunctionData(functionFragment: "accountId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeRootValidator",
    values: [BytesLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entrypoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFromExecutor",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUserOp",
    values: [PackedUserOperationStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executorConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike, AddressLike, BytesLike, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "installModule",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "installValidations",
    values: [
      BytesLike[],
      ValidationManager.ValidationConfigStruct[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedSelector",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleInstalled",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionConfig",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rootValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectorConfig",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsExecutionMode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsModule",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallModule",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallValidation",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validNonceFrom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [PackedUserOperationStruct, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validationConfig",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "accountId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRootValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entrypoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeFromExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executorConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "installModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isModuleInstalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rootValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectorConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsExecutionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validNonceFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validationConfig",
    data: BytesLike
  ): Result;
}

export namespace ModuleInstalledEvent {
  export type InputTuple = [moduleTypeId: BigNumberish, module: AddressLike];
  export type OutputTuple = [moduleTypeId: bigint, module: string];
  export interface OutputObject {
    moduleTypeId: bigint;
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleUninstallResultEvent {
  export type InputTuple = [module: AddressLike, result: boolean];
  export type OutputTuple = [module: string, result: boolean];
  export interface OutputObject {
    module: string;
    result: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleUninstalledEvent {
  export type InputTuple = [moduleTypeId: BigNumberish, module: AddressLike];
  export type OutputTuple = [moduleTypeId: bigint, module: string];
  export interface OutputObject {
    moduleTypeId: bigint;
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NonceInvalidatedEvent {
  export type InputTuple = [nonce: BigNumberish];
  export type OutputTuple = [nonce: bigint];
  export interface OutputObject {
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionInstalledEvent {
  export type InputTuple = [permission: BytesLike, nonce: BigNumberish];
  export type OutputTuple = [permission: string, nonce: bigint];
  export interface OutputObject {
    permission: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionUninstalledEvent {
  export type InputTuple = [permission: BytesLike];
  export type OutputTuple = [permission: string];
  export interface OutputObject {
    permission: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RootValidatorUpdatedEvent {
  export type InputTuple = [rootValidator: BytesLike];
  export type OutputTuple = [rootValidator: string];
  export interface OutputObject {
    rootValidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelectorSetEvent {
  export type InputTuple = [
    selector: BytesLike,
    vId: BytesLike,
    allowed: boolean
  ];
  export type OutputTuple = [selector: string, vId: string, allowed: boolean];
  export interface OutputObject {
    selector: string;
    vId: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TryExecuteUnsuccessfulEvent {
  export type InputTuple = [
    batchExecutionindex: BigNumberish,
    result: BytesLike
  ];
  export type OutputTuple = [batchExecutionindex: bigint, result: string];
  export interface OutputObject {
    batchExecutionindex: bigint;
    result: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorInstalledEvent {
  export type InputTuple = [validator: AddressLike, nonce: BigNumberish];
  export type OutputTuple = [validator: string, nonce: bigint];
  export interface OutputObject {
    validator: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorUninstalledEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TKernelV3 extends BaseContract {
  connect(runner?: ContractRunner | null): TKernelV3;
  waitForDeployment(): Promise<this>;

  interface: TKernelV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountId: TypedContractMethod<[], [string], "view">;

  changeRootValidator: TypedContractMethod<
    [
      _rootValidator: BytesLike,
      hook: AddressLike,
      validatorData: BytesLike,
      hookData: BytesLike
    ],
    [void],
    "payable"
  >;

  currentNonce: TypedContractMethod<[], [bigint], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  entrypoint: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<
    [execMode: BytesLike, executionCalldata: BytesLike],
    [void],
    "payable"
  >;

  executeFromExecutor: TypedContractMethod<
    [execMode: BytesLike, executionCalldata: BytesLike],
    [string[]],
    "payable"
  >;

  executeUserOp: TypedContractMethod<
    [userOp: PackedUserOperationStruct, userOpHash: BytesLike],
    [void],
    "payable"
  >;

  executorConfig: TypedContractMethod<
    [executor: AddressLike],
    [ExecutorManager.ExecutorConfigStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _rootValidator: BytesLike,
      hook: AddressLike,
      validatorData: BytesLike,
      hookData: BytesLike,
      initConfig: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  installModule: TypedContractMethod<
    [moduleType: BigNumberish, module: AddressLike, initData: BytesLike],
    [void],
    "payable"
  >;

  installValidations: TypedContractMethod<
    [
      vIds: BytesLike[],
      configs: ValidationManager.ValidationConfigStruct[],
      validationData: BytesLike[],
      hookData: BytesLike[]
    ],
    [void],
    "payable"
  >;

  invalidateNonce: TypedContractMethod<
    [nonce: BigNumberish],
    [void],
    "payable"
  >;

  isAllowedSelector: TypedContractMethod<
    [vId: BytesLike, selector: BytesLike],
    [boolean],
    "view"
  >;

  isModuleInstalled: TypedContractMethod<
    [
      moduleType: BigNumberish,
      module: AddressLike,
      additionalContext: BytesLike
    ],
    [boolean],
    "view"
  >;

  isValidSignature: TypedContractMethod<
    [hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  permissionConfig: TypedContractMethod<
    [pId: BytesLike],
    [ValidationManager.PermissionConfigStructOutput],
    "view"
  >;

  rootValidator: TypedContractMethod<[], [string], "view">;

  selectorConfig: TypedContractMethod<
    [selector: BytesLike],
    [SelectorManager.SelectorConfigStructOutput],
    "view"
  >;

  supportsExecutionMode: TypedContractMethod<
    [mode: BytesLike],
    [boolean],
    "view"
  >;

  supportsModule: TypedContractMethod<
    [moduleTypeId: BigNumberish],
    [boolean],
    "view"
  >;

  uninstallModule: TypedContractMethod<
    [moduleType: BigNumberish, module: AddressLike, deInitData: BytesLike],
    [void],
    "payable"
  >;

  uninstallValidation: TypedContractMethod<
    [vId: BytesLike, deinitData: BytesLike, hookDeinitData: BytesLike],
    [void],
    "payable"
  >;

  upgradeTo: TypedContractMethod<
    [_newImplementation: AddressLike],
    [void],
    "payable"
  >;

  validNonceFrom: TypedContractMethod<[], [bigint], "view">;

  validateUserOp: TypedContractMethod<
    [
      userOp: PackedUserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  validationConfig: TypedContractMethod<
    [vId: BytesLike],
    [ValidationManager.ValidationConfigStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changeRootValidator"
  ): TypedContractMethod<
    [
      _rootValidator: BytesLike,
      hook: AddressLike,
      validatorData: BytesLike,
      hookData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "currentNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "entrypoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [execMode: BytesLike, executionCalldata: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeFromExecutor"
  ): TypedContractMethod<
    [execMode: BytesLike, executionCalldata: BytesLike],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeUserOp"
  ): TypedContractMethod<
    [userOp: PackedUserOperationStruct, userOpHash: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executorConfig"
  ): TypedContractMethod<
    [executor: AddressLike],
    [ExecutorManager.ExecutorConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _rootValidator: BytesLike,
      hook: AddressLike,
      validatorData: BytesLike,
      hookData: BytesLike,
      initConfig: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "installModule"
  ): TypedContractMethod<
    [moduleType: BigNumberish, module: AddressLike, initData: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "installValidations"
  ): TypedContractMethod<
    [
      vIds: BytesLike[],
      configs: ValidationManager.ValidationConfigStruct[],
      validationData: BytesLike[],
      hookData: BytesLike[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "invalidateNonce"
  ): TypedContractMethod<[nonce: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "isAllowedSelector"
  ): TypedContractMethod<
    [vId: BytesLike, selector: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isModuleInstalled"
  ): TypedContractMethod<
    [
      moduleType: BigNumberish,
      module: AddressLike,
      additionalContext: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "permissionConfig"
  ): TypedContractMethod<
    [pId: BytesLike],
    [ValidationManager.PermissionConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "rootValidator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "selectorConfig"
  ): TypedContractMethod<
    [selector: BytesLike],
    [SelectorManager.SelectorConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsExecutionMode"
  ): TypedContractMethod<[mode: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsModule"
  ): TypedContractMethod<[moduleTypeId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "uninstallModule"
  ): TypedContractMethod<
    [moduleType: BigNumberish, module: AddressLike, deInitData: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "uninstallValidation"
  ): TypedContractMethod<
    [vId: BytesLike, deinitData: BytesLike, hookDeinitData: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<[_newImplementation: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "validNonceFrom"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "validateUserOp"
  ): TypedContractMethod<
    [
      userOp: PackedUserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "validationConfig"
  ): TypedContractMethod<
    [vId: BytesLike],
    [ValidationManager.ValidationConfigStructOutput],
    "view"
  >;

  getEvent(
    key: "ModuleInstalled"
  ): TypedContractEvent<
    ModuleInstalledEvent.InputTuple,
    ModuleInstalledEvent.OutputTuple,
    ModuleInstalledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleUninstallResult"
  ): TypedContractEvent<
    ModuleUninstallResultEvent.InputTuple,
    ModuleUninstallResultEvent.OutputTuple,
    ModuleUninstallResultEvent.OutputObject
  >;
  getEvent(
    key: "ModuleUninstalled"
  ): TypedContractEvent<
    ModuleUninstalledEvent.InputTuple,
    ModuleUninstalledEvent.OutputTuple,
    ModuleUninstalledEvent.OutputObject
  >;
  getEvent(
    key: "NonceInvalidated"
  ): TypedContractEvent<
    NonceInvalidatedEvent.InputTuple,
    NonceInvalidatedEvent.OutputTuple,
    NonceInvalidatedEvent.OutputObject
  >;
  getEvent(
    key: "PermissionInstalled"
  ): TypedContractEvent<
    PermissionInstalledEvent.InputTuple,
    PermissionInstalledEvent.OutputTuple,
    PermissionInstalledEvent.OutputObject
  >;
  getEvent(
    key: "PermissionUninstalled"
  ): TypedContractEvent<
    PermissionUninstalledEvent.InputTuple,
    PermissionUninstalledEvent.OutputTuple,
    PermissionUninstalledEvent.OutputObject
  >;
  getEvent(
    key: "Received"
  ): TypedContractEvent<
    ReceivedEvent.InputTuple,
    ReceivedEvent.OutputTuple,
    ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "RootValidatorUpdated"
  ): TypedContractEvent<
    RootValidatorUpdatedEvent.InputTuple,
    RootValidatorUpdatedEvent.OutputTuple,
    RootValidatorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SelectorSet"
  ): TypedContractEvent<
    SelectorSetEvent.InputTuple,
    SelectorSetEvent.OutputTuple,
    SelectorSetEvent.OutputObject
  >;
  getEvent(
    key: "TryExecuteUnsuccessful"
  ): TypedContractEvent<
    TryExecuteUnsuccessfulEvent.InputTuple,
    TryExecuteUnsuccessfulEvent.OutputTuple,
    TryExecuteUnsuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorInstalled"
  ): TypedContractEvent<
    ValidatorInstalledEvent.InputTuple,
    ValidatorInstalledEvent.OutputTuple,
    ValidatorInstalledEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorUninstalled"
  ): TypedContractEvent<
    ValidatorUninstalledEvent.InputTuple,
    ValidatorUninstalledEvent.OutputTuple,
    ValidatorUninstalledEvent.OutputObject
  >;

  filters: {
    "ModuleInstalled(uint256,address)": TypedContractEvent<
      ModuleInstalledEvent.InputTuple,
      ModuleInstalledEvent.OutputTuple,
      ModuleInstalledEvent.OutputObject
    >;
    ModuleInstalled: TypedContractEvent<
      ModuleInstalledEvent.InputTuple,
      ModuleInstalledEvent.OutputTuple,
      ModuleInstalledEvent.OutputObject
    >;

    "ModuleUninstallResult(address,bool)": TypedContractEvent<
      ModuleUninstallResultEvent.InputTuple,
      ModuleUninstallResultEvent.OutputTuple,
      ModuleUninstallResultEvent.OutputObject
    >;
    ModuleUninstallResult: TypedContractEvent<
      ModuleUninstallResultEvent.InputTuple,
      ModuleUninstallResultEvent.OutputTuple,
      ModuleUninstallResultEvent.OutputObject
    >;

    "ModuleUninstalled(uint256,address)": TypedContractEvent<
      ModuleUninstalledEvent.InputTuple,
      ModuleUninstalledEvent.OutputTuple,
      ModuleUninstalledEvent.OutputObject
    >;
    ModuleUninstalled: TypedContractEvent<
      ModuleUninstalledEvent.InputTuple,
      ModuleUninstalledEvent.OutputTuple,
      ModuleUninstalledEvent.OutputObject
    >;

    "NonceInvalidated(uint32)": TypedContractEvent<
      NonceInvalidatedEvent.InputTuple,
      NonceInvalidatedEvent.OutputTuple,
      NonceInvalidatedEvent.OutputObject
    >;
    NonceInvalidated: TypedContractEvent<
      NonceInvalidatedEvent.InputTuple,
      NonceInvalidatedEvent.OutputTuple,
      NonceInvalidatedEvent.OutputObject
    >;

    "PermissionInstalled(bytes4,uint32)": TypedContractEvent<
      PermissionInstalledEvent.InputTuple,
      PermissionInstalledEvent.OutputTuple,
      PermissionInstalledEvent.OutputObject
    >;
    PermissionInstalled: TypedContractEvent<
      PermissionInstalledEvent.InputTuple,
      PermissionInstalledEvent.OutputTuple,
      PermissionInstalledEvent.OutputObject
    >;

    "PermissionUninstalled(bytes4)": TypedContractEvent<
      PermissionUninstalledEvent.InputTuple,
      PermissionUninstalledEvent.OutputTuple,
      PermissionUninstalledEvent.OutputObject
    >;
    PermissionUninstalled: TypedContractEvent<
      PermissionUninstalledEvent.InputTuple,
      PermissionUninstalledEvent.OutputTuple,
      PermissionUninstalledEvent.OutputObject
    >;

    "Received(address,uint256)": TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;
    Received: TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;

    "RootValidatorUpdated(bytes21)": TypedContractEvent<
      RootValidatorUpdatedEvent.InputTuple,
      RootValidatorUpdatedEvent.OutputTuple,
      RootValidatorUpdatedEvent.OutputObject
    >;
    RootValidatorUpdated: TypedContractEvent<
      RootValidatorUpdatedEvent.InputTuple,
      RootValidatorUpdatedEvent.OutputTuple,
      RootValidatorUpdatedEvent.OutputObject
    >;

    "SelectorSet(bytes4,bytes21,bool)": TypedContractEvent<
      SelectorSetEvent.InputTuple,
      SelectorSetEvent.OutputTuple,
      SelectorSetEvent.OutputObject
    >;
    SelectorSet: TypedContractEvent<
      SelectorSetEvent.InputTuple,
      SelectorSetEvent.OutputTuple,
      SelectorSetEvent.OutputObject
    >;

    "TryExecuteUnsuccessful(uint256,bytes)": TypedContractEvent<
      TryExecuteUnsuccessfulEvent.InputTuple,
      TryExecuteUnsuccessfulEvent.OutputTuple,
      TryExecuteUnsuccessfulEvent.OutputObject
    >;
    TryExecuteUnsuccessful: TypedContractEvent<
      TryExecuteUnsuccessfulEvent.InputTuple,
      TryExecuteUnsuccessfulEvent.OutputTuple,
      TryExecuteUnsuccessfulEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "ValidatorInstalled(address,uint32)": TypedContractEvent<
      ValidatorInstalledEvent.InputTuple,
      ValidatorInstalledEvent.OutputTuple,
      ValidatorInstalledEvent.OutputObject
    >;
    ValidatorInstalled: TypedContractEvent<
      ValidatorInstalledEvent.InputTuple,
      ValidatorInstalledEvent.OutputTuple,
      ValidatorInstalledEvent.OutputObject
    >;

    "ValidatorUninstalled(address)": TypedContractEvent<
      ValidatorUninstalledEvent.InputTuple,
      ValidatorUninstalledEvent.OutputTuple,
      ValidatorUninstalledEvent.OutputObject
    >;
    ValidatorUninstalled: TypedContractEvent<
      ValidatorUninstalledEvent.InputTuple,
      ValidatorUninstalledEvent.OutputTuple,
      ValidatorUninstalledEvent.OutputObject
    >;
  };
}
