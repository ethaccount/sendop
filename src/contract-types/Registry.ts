/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type AttestationRequestStruct = {
  moduleAddress: AddressLike;
  expirationTime: BigNumberish;
  data: BytesLike;
  moduleTypes: BigNumberish[];
};

export type AttestationRequestStructOutput = [
  moduleAddress: string,
  expirationTime: bigint,
  data: string,
  moduleTypes: bigint[]
] & {
  moduleAddress: string;
  expirationTime: bigint;
  data: string;
  moduleTypes: bigint[];
};

export type AttestationRecordStruct = {
  time: BigNumberish;
  expirationTime: BigNumberish;
  revocationTime: BigNumberish;
  moduleTypes: BigNumberish;
  moduleAddress: AddressLike;
  attester: AddressLike;
  dataPointer: AddressLike;
  schemaUID: BytesLike;
};

export type AttestationRecordStructOutput = [
  time: bigint,
  expirationTime: bigint,
  revocationTime: bigint,
  moduleTypes: bigint,
  moduleAddress: string,
  attester: string,
  dataPointer: string,
  schemaUID: string
] & {
  time: bigint;
  expirationTime: bigint;
  revocationTime: bigint;
  moduleTypes: bigint;
  moduleAddress: string;
  attester: string;
  dataPointer: string;
  schemaUID: string;
};

export type ModuleRecordStruct = {
  resolverUID: BytesLike;
  sender: AddressLike;
  metadata: BytesLike;
};

export type ModuleRecordStructOutput = [
  resolverUID: string,
  sender: string,
  metadata: string
] & { resolverUID: string; sender: string; metadata: string };

export type ResolverRecordStruct = {
  resolver: AddressLike;
  resolverOwner: AddressLike;
};

export type ResolverRecordStructOutput = [
  resolver: string,
  resolverOwner: string
] & { resolver: string; resolverOwner: string };

export type SchemaRecordStruct = {
  registeredAt: BigNumberish;
  validator: AddressLike;
  schema: string;
};

export type SchemaRecordStructOutput = [
  registeredAt: bigint,
  validator: string,
  schema: string
] & { registeredAt: bigint; validator: string; schema: string };

export type RevocationRequestStruct = { moduleAddress: AddressLike };

export type RevocationRequestStructOutput = [moduleAddress: string] & {
  moduleAddress: string;
};

export interface RegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "attest(bytes32,address,(address,uint48,bytes,uint256[])[],bytes)"
      | "attest(bytes32,address,(address,uint48,bytes,uint256[]),bytes)"
      | "attest(bytes32,(address,uint48,bytes,uint256[]))"
      | "attest(bytes32,(address,uint48,bytes,uint256[])[])"
      | "attesterNonce"
      | "calcModuleAddress"
      | "check(address,address[],uint256)"
      | "check(address,uint256,address[],uint256)"
      | "check(address,uint256)"
      | "check(address)"
      | "checkForAccount(address,address)"
      | "checkForAccount(address,address,uint256)"
      | "deployModule"
      | "deployViaFactory"
      | "eip712Domain"
      | "findAttestation"
      | "findAttestations"
      | "findModule"
      | "findResolver"
      | "findSchema"
      | "findTrustedAttesters"
      | "getDigest((address,uint48,bytes,uint256[]),address)"
      | "getDigest((address)[],address)"
      | "getDigest((address),address)"
      | "getDigest((address,uint48,bytes,uint256[])[],address)"
      | "registerModule"
      | "registerResolver"
      | "registerSchema"
      | "revoke((address)[])"
      | "revoke(address,(address)[],bytes)"
      | "revoke((address))"
      | "revoke(address,(address),bytes)"
      | "setResolver"
      | "transferResolverOwnership"
      | "trustAttesters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Attested"
      | "ModuleRegistration"
      | "NewResolver"
      | "NewResolverOwner"
      | "NewTrustedAttesters"
      | "ResolverRevocationError"
      | "Revoked"
      | "SchemaRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "attest(bytes32,address,(address,uint48,bytes,uint256[])[],bytes)",
    values: [BytesLike, AddressLike, AttestationRequestStruct[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "attest(bytes32,address,(address,uint48,bytes,uint256[]),bytes)",
    values: [BytesLike, AddressLike, AttestationRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "attest(bytes32,(address,uint48,bytes,uint256[]))",
    values: [BytesLike, AttestationRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "attest(bytes32,(address,uint48,bytes,uint256[])[])",
    values: [BytesLike, AttestationRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "attesterNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calcModuleAddress",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "check(address,address[],uint256)",
    values: [AddressLike, AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "check(address,uint256,address[],uint256)",
    values: [AddressLike, BigNumberish, AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "check(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "check(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkForAccount(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkForAccount(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployModule",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployViaFactory",
    values: [AddressLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "findAttestation",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "findAttestations",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "findModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "findResolver",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "findSchema",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "findTrustedAttesters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDigest((address,uint48,bytes,uint256[]),address)",
    values: [AttestationRequestStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDigest((address)[],address)",
    values: [RevocationRequestStruct[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDigest((address),address)",
    values: [RevocationRequestStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDigest((address,uint48,bytes,uint256[])[],address)",
    values: [AttestationRequestStruct[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerModule",
    values: [BytesLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerResolver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSchema",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke((address)[])",
    values: [RevocationRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke(address,(address)[],bytes)",
    values: [AddressLike, RevocationRequestStruct[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke((address))",
    values: [RevocationRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke(address,(address),bytes)",
    values: [AddressLike, RevocationRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferResolverOwnership",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustAttesters",
    values: [BigNumberish, AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "attest(bytes32,address,(address,uint48,bytes,uint256[])[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attest(bytes32,address,(address,uint48,bytes,uint256[]),bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attest(bytes32,(address,uint48,bytes,uint256[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attest(bytes32,(address,uint48,bytes,uint256[])[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attesterNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcModuleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "check(address,address[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "check(address,uint256,address[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "check(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "check(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkForAccount(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkForAccount(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployViaFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findSchema", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findTrustedAttesters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDigest((address,uint48,bytes,uint256[]),address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDigest((address)[],address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDigest((address),address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDigest((address,uint48,bytes,uint256[])[],address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revoke((address)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revoke(address,(address)[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revoke((address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revoke(address,(address),bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferResolverOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustAttesters",
    data: BytesLike
  ): Result;
}

export namespace AttestedEvent {
  export type InputTuple = [
    moduleAddress: AddressLike,
    attester: AddressLike,
    schemaUID: BytesLike,
    sstore2Pointer: AddressLike
  ];
  export type OutputTuple = [
    moduleAddress: string,
    attester: string,
    schemaUID: string,
    sstore2Pointer: string
  ];
  export interface OutputObject {
    moduleAddress: string;
    attester: string;
    schemaUID: string;
    sstore2Pointer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleRegistrationEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewResolverEvent {
  export type InputTuple = [uid: BytesLike, resolver: AddressLike];
  export type OutputTuple = [uid: string, resolver: string];
  export interface OutputObject {
    uid: string;
    resolver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewResolverOwnerEvent {
  export type InputTuple = [uid: BytesLike, newOwner: AddressLike];
  export type OutputTuple = [uid: string, newOwner: string];
  export interface OutputObject {
    uid: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTrustedAttestersEvent {
  export type InputTuple = [smartAccount: AddressLike];
  export type OutputTuple = [smartAccount: string];
  export interface OutputObject {
    smartAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResolverRevocationErrorEvent {
  export type InputTuple = [resolver: AddressLike];
  export type OutputTuple = [resolver: string];
  export interface OutputObject {
    resolver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedEvent {
  export type InputTuple = [
    moduleAddress: AddressLike,
    revoker: AddressLike,
    schema: BytesLike
  ];
  export type OutputTuple = [
    moduleAddress: string,
    revoker: string,
    schema: string
  ];
  export interface OutputObject {
    moduleAddress: string;
    revoker: string;
    schema: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SchemaRegisteredEvent {
  export type InputTuple = [uid: BytesLike, registerer: AddressLike];
  export type OutputTuple = [uid: string, registerer: string];
  export interface OutputObject {
    uid: string;
    registerer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Registry extends BaseContract {
  connect(runner?: ContractRunner | null): Registry;
  waitForDeployment(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "attest(bytes32,address,(address,uint48,bytes,uint256[])[],bytes)": TypedContractMethod<
    [
      schemaUID: BytesLike,
      attester: AddressLike,
      requests: AttestationRequestStruct[],
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "attest(bytes32,address,(address,uint48,bytes,uint256[]),bytes)": TypedContractMethod<
    [
      schemaUID: BytesLike,
      attester: AddressLike,
      request: AttestationRequestStruct,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "attest(bytes32,(address,uint48,bytes,uint256[]))": TypedContractMethod<
    [schemaUID: BytesLike, request: AttestationRequestStruct],
    [void],
    "nonpayable"
  >;

  "attest(bytes32,(address,uint48,bytes,uint256[])[])": TypedContractMethod<
    [schemaUID: BytesLike, requests: AttestationRequestStruct[]],
    [void],
    "nonpayable"
  >;

  attesterNonce: TypedContractMethod<[attester: AddressLike], [bigint], "view">;

  calcModuleAddress: TypedContractMethod<
    [salt: BytesLike, initCode: BytesLike],
    [string],
    "view"
  >;

  "check(address,address[],uint256)": TypedContractMethod<
    [module: AddressLike, attesters: AddressLike[], threshold: BigNumberish],
    [void],
    "view"
  >;

  "check(address,uint256,address[],uint256)": TypedContractMethod<
    [
      module: AddressLike,
      moduleType: BigNumberish,
      attesters: AddressLike[],
      threshold: BigNumberish
    ],
    [void],
    "view"
  >;

  "check(address,uint256)": TypedContractMethod<
    [module: AddressLike, moduleType: BigNumberish],
    [void],
    "view"
  >;

  "check(address)": TypedContractMethod<[module: AddressLike], [void], "view">;

  "checkForAccount(address,address)": TypedContractMethod<
    [smartAccount: AddressLike, module: AddressLike],
    [void],
    "view"
  >;

  "checkForAccount(address,address,uint256)": TypedContractMethod<
    [smartAccount: AddressLike, module: AddressLike, moduleType: BigNumberish],
    [void],
    "view"
  >;

  deployModule: TypedContractMethod<
    [
      salt: BytesLike,
      resolverUID: BytesLike,
      initCode: BytesLike,
      metadata: BytesLike,
      resolverContext: BytesLike
    ],
    [string],
    "payable"
  >;

  deployViaFactory: TypedContractMethod<
    [
      factory: AddressLike,
      callOnFactory: BytesLike,
      metadata: BytesLike,
      resolverUID: BytesLike,
      resolverContext: BytesLike
    ],
    [string],
    "payable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  findAttestation: TypedContractMethod<
    [module: AddressLike, attester: AddressLike],
    [AttestationRecordStructOutput],
    "view"
  >;

  findAttestations: TypedContractMethod<
    [module: AddressLike, attesters: AddressLike[]],
    [AttestationRecordStructOutput[]],
    "view"
  >;

  findModule: TypedContractMethod<
    [moduleAddress: AddressLike],
    [ModuleRecordStructOutput],
    "view"
  >;

  findResolver: TypedContractMethod<
    [uid: BytesLike],
    [ResolverRecordStructOutput],
    "view"
  >;

  findSchema: TypedContractMethod<
    [uid: BytesLike],
    [SchemaRecordStructOutput],
    "view"
  >;

  findTrustedAttesters: TypedContractMethod<
    [smartAccount: AddressLike],
    [string[]],
    "view"
  >;

  "getDigest((address,uint48,bytes,uint256[]),address)": TypedContractMethod<
    [request: AttestationRequestStruct, attester: AddressLike],
    [string],
    "view"
  >;

  "getDigest((address)[],address)": TypedContractMethod<
    [requests: RevocationRequestStruct[], attester: AddressLike],
    [string],
    "view"
  >;

  "getDigest((address),address)": TypedContractMethod<
    [request: RevocationRequestStruct, attester: AddressLike],
    [string],
    "view"
  >;

  "getDigest((address,uint48,bytes,uint256[])[],address)": TypedContractMethod<
    [requests: AttestationRequestStruct[], attester: AddressLike],
    [string],
    "view"
  >;

  registerModule: TypedContractMethod<
    [
      resolverUID: BytesLike,
      moduleAddress: AddressLike,
      metadata: BytesLike,
      resolverContext: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  registerResolver: TypedContractMethod<
    [resolver: AddressLike],
    [string],
    "nonpayable"
  >;

  registerSchema: TypedContractMethod<
    [schema: string, validator: AddressLike],
    [string],
    "nonpayable"
  >;

  "revoke((address)[])": TypedContractMethod<
    [requests: RevocationRequestStruct[]],
    [void],
    "nonpayable"
  >;

  "revoke(address,(address)[],bytes)": TypedContractMethod<
    [
      attester: AddressLike,
      requests: RevocationRequestStruct[],
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "revoke((address))": TypedContractMethod<
    [request: RevocationRequestStruct],
    [void],
    "nonpayable"
  >;

  "revoke(address,(address),bytes)": TypedContractMethod<
    [
      attester: AddressLike,
      request: RevocationRequestStruct,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setResolver: TypedContractMethod<
    [uid: BytesLike, resolver: AddressLike],
    [void],
    "nonpayable"
  >;

  transferResolverOwnership: TypedContractMethod<
    [uid: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustAttesters: TypedContractMethod<
    [threshold: BigNumberish, attesters: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attest(bytes32,address,(address,uint48,bytes,uint256[])[],bytes)"
  ): TypedContractMethod<
    [
      schemaUID: BytesLike,
      attester: AddressLike,
      requests: AttestationRequestStruct[],
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attest(bytes32,address,(address,uint48,bytes,uint256[]),bytes)"
  ): TypedContractMethod<
    [
      schemaUID: BytesLike,
      attester: AddressLike,
      request: AttestationRequestStruct,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attest(bytes32,(address,uint48,bytes,uint256[]))"
  ): TypedContractMethod<
    [schemaUID: BytesLike, request: AttestationRequestStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attest(bytes32,(address,uint48,bytes,uint256[])[])"
  ): TypedContractMethod<
    [schemaUID: BytesLike, requests: AttestationRequestStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attesterNonce"
  ): TypedContractMethod<[attester: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calcModuleAddress"
  ): TypedContractMethod<
    [salt: BytesLike, initCode: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "check(address,address[],uint256)"
  ): TypedContractMethod<
    [module: AddressLike, attesters: AddressLike[], threshold: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "check(address,uint256,address[],uint256)"
  ): TypedContractMethod<
    [
      module: AddressLike,
      moduleType: BigNumberish,
      attesters: AddressLike[],
      threshold: BigNumberish
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "check(address,uint256)"
  ): TypedContractMethod<
    [module: AddressLike, moduleType: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "check(address)"
  ): TypedContractMethod<[module: AddressLike], [void], "view">;
  getFunction(
    nameOrSignature: "checkForAccount(address,address)"
  ): TypedContractMethod<
    [smartAccount: AddressLike, module: AddressLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkForAccount(address,address,uint256)"
  ): TypedContractMethod<
    [smartAccount: AddressLike, module: AddressLike, moduleType: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "deployModule"
  ): TypedContractMethod<
    [
      salt: BytesLike,
      resolverUID: BytesLike,
      initCode: BytesLike,
      metadata: BytesLike,
      resolverContext: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deployViaFactory"
  ): TypedContractMethod<
    [
      factory: AddressLike,
      callOnFactory: BytesLike,
      metadata: BytesLike,
      resolverUID: BytesLike,
      resolverContext: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "findAttestation"
  ): TypedContractMethod<
    [module: AddressLike, attester: AddressLike],
    [AttestationRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "findAttestations"
  ): TypedContractMethod<
    [module: AddressLike, attesters: AddressLike[]],
    [AttestationRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "findModule"
  ): TypedContractMethod<
    [moduleAddress: AddressLike],
    [ModuleRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "findResolver"
  ): TypedContractMethod<
    [uid: BytesLike],
    [ResolverRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "findSchema"
  ): TypedContractMethod<[uid: BytesLike], [SchemaRecordStructOutput], "view">;
  getFunction(
    nameOrSignature: "findTrustedAttesters"
  ): TypedContractMethod<[smartAccount: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDigest((address,uint48,bytes,uint256[]),address)"
  ): TypedContractMethod<
    [request: AttestationRequestStruct, attester: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDigest((address)[],address)"
  ): TypedContractMethod<
    [requests: RevocationRequestStruct[], attester: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDigest((address),address)"
  ): TypedContractMethod<
    [request: RevocationRequestStruct, attester: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDigest((address,uint48,bytes,uint256[])[],address)"
  ): TypedContractMethod<
    [requests: AttestationRequestStruct[], attester: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerModule"
  ): TypedContractMethod<
    [
      resolverUID: BytesLike,
      moduleAddress: AddressLike,
      metadata: BytesLike,
      resolverContext: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerResolver"
  ): TypedContractMethod<[resolver: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "registerSchema"
  ): TypedContractMethod<
    [schema: string, validator: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke((address)[])"
  ): TypedContractMethod<
    [requests: RevocationRequestStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke(address,(address)[],bytes)"
  ): TypedContractMethod<
    [
      attester: AddressLike,
      requests: RevocationRequestStruct[],
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke((address))"
  ): TypedContractMethod<
    [request: RevocationRequestStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke(address,(address),bytes)"
  ): TypedContractMethod<
    [
      attester: AddressLike,
      request: RevocationRequestStruct,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setResolver"
  ): TypedContractMethod<
    [uid: BytesLike, resolver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferResolverOwnership"
  ): TypedContractMethod<
    [uid: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trustAttesters"
  ): TypedContractMethod<
    [threshold: BigNumberish, attesters: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Attested"
  ): TypedContractEvent<
    AttestedEvent.InputTuple,
    AttestedEvent.OutputTuple,
    AttestedEvent.OutputObject
  >;
  getEvent(
    key: "ModuleRegistration"
  ): TypedContractEvent<
    ModuleRegistrationEvent.InputTuple,
    ModuleRegistrationEvent.OutputTuple,
    ModuleRegistrationEvent.OutputObject
  >;
  getEvent(
    key: "NewResolver"
  ): TypedContractEvent<
    NewResolverEvent.InputTuple,
    NewResolverEvent.OutputTuple,
    NewResolverEvent.OutputObject
  >;
  getEvent(
    key: "NewResolverOwner"
  ): TypedContractEvent<
    NewResolverOwnerEvent.InputTuple,
    NewResolverOwnerEvent.OutputTuple,
    NewResolverOwnerEvent.OutputObject
  >;
  getEvent(
    key: "NewTrustedAttesters"
  ): TypedContractEvent<
    NewTrustedAttestersEvent.InputTuple,
    NewTrustedAttestersEvent.OutputTuple,
    NewTrustedAttestersEvent.OutputObject
  >;
  getEvent(
    key: "ResolverRevocationError"
  ): TypedContractEvent<
    ResolverRevocationErrorEvent.InputTuple,
    ResolverRevocationErrorEvent.OutputTuple,
    ResolverRevocationErrorEvent.OutputObject
  >;
  getEvent(
    key: "Revoked"
  ): TypedContractEvent<
    RevokedEvent.InputTuple,
    RevokedEvent.OutputTuple,
    RevokedEvent.OutputObject
  >;
  getEvent(
    key: "SchemaRegistered"
  ): TypedContractEvent<
    SchemaRegisteredEvent.InputTuple,
    SchemaRegisteredEvent.OutputTuple,
    SchemaRegisteredEvent.OutputObject
  >;

  filters: {
    "Attested(address,address,bytes32,address)": TypedContractEvent<
      AttestedEvent.InputTuple,
      AttestedEvent.OutputTuple,
      AttestedEvent.OutputObject
    >;
    Attested: TypedContractEvent<
      AttestedEvent.InputTuple,
      AttestedEvent.OutputTuple,
      AttestedEvent.OutputObject
    >;

    "ModuleRegistration(address)": TypedContractEvent<
      ModuleRegistrationEvent.InputTuple,
      ModuleRegistrationEvent.OutputTuple,
      ModuleRegistrationEvent.OutputObject
    >;
    ModuleRegistration: TypedContractEvent<
      ModuleRegistrationEvent.InputTuple,
      ModuleRegistrationEvent.OutputTuple,
      ModuleRegistrationEvent.OutputObject
    >;

    "NewResolver(bytes32,address)": TypedContractEvent<
      NewResolverEvent.InputTuple,
      NewResolverEvent.OutputTuple,
      NewResolverEvent.OutputObject
    >;
    NewResolver: TypedContractEvent<
      NewResolverEvent.InputTuple,
      NewResolverEvent.OutputTuple,
      NewResolverEvent.OutputObject
    >;

    "NewResolverOwner(bytes32,address)": TypedContractEvent<
      NewResolverOwnerEvent.InputTuple,
      NewResolverOwnerEvent.OutputTuple,
      NewResolverOwnerEvent.OutputObject
    >;
    NewResolverOwner: TypedContractEvent<
      NewResolverOwnerEvent.InputTuple,
      NewResolverOwnerEvent.OutputTuple,
      NewResolverOwnerEvent.OutputObject
    >;

    "NewTrustedAttesters(address)": TypedContractEvent<
      NewTrustedAttestersEvent.InputTuple,
      NewTrustedAttestersEvent.OutputTuple,
      NewTrustedAttestersEvent.OutputObject
    >;
    NewTrustedAttesters: TypedContractEvent<
      NewTrustedAttestersEvent.InputTuple,
      NewTrustedAttestersEvent.OutputTuple,
      NewTrustedAttestersEvent.OutputObject
    >;

    "ResolverRevocationError(address)": TypedContractEvent<
      ResolverRevocationErrorEvent.InputTuple,
      ResolverRevocationErrorEvent.OutputTuple,
      ResolverRevocationErrorEvent.OutputObject
    >;
    ResolverRevocationError: TypedContractEvent<
      ResolverRevocationErrorEvent.InputTuple,
      ResolverRevocationErrorEvent.OutputTuple,
      ResolverRevocationErrorEvent.OutputObject
    >;

    "Revoked(address,address,bytes32)": TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
    Revoked: TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;

    "SchemaRegistered(bytes32,address)": TypedContractEvent<
      SchemaRegisteredEvent.InputTuple,
      SchemaRegisteredEvent.OutputTuple,
      SchemaRegisteredEvent.OutputObject
    >;
    SchemaRegistered: TypedContractEvent<
      SchemaRegisteredEvent.InputTuple,
      SchemaRegisteredEvent.OutputTuple,
      SchemaRegisteredEvent.OutputObject
    >;
  };
}
