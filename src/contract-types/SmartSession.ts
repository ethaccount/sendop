/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type PolicyDataStruct = { policy: AddressLike; initData: BytesLike };

export type PolicyDataStructOutput = [policy: string, initData: string] & {
  policy: string;
  initData: string;
};

export type ActionDataStruct = {
  actionTargetSelector: BytesLike;
  actionTarget: AddressLike;
  actionPolicies: PolicyDataStruct[];
};

export type ActionDataStructOutput = [
  actionTargetSelector: string,
  actionTarget: string,
  actionPolicies: PolicyDataStructOutput[]
] & {
  actionTargetSelector: string;
  actionTarget: string;
  actionPolicies: PolicyDataStructOutput[];
};

export type ERC7739ContextStruct = {
  appDomainSeparator: BytesLike;
  contentNames: string[];
};

export type ERC7739ContextStructOutput = [
  appDomainSeparator: string,
  contentNames: string[]
] & { appDomainSeparator: string; contentNames: string[] };

export type ERC7739DataStruct = {
  allowedERC7739Content: ERC7739ContextStruct[];
  erc1271Policies: PolicyDataStruct[];
};

export type ERC7739DataStructOutput = [
  allowedERC7739Content: ERC7739ContextStructOutput[],
  erc1271Policies: PolicyDataStructOutput[]
] & {
  allowedERC7739Content: ERC7739ContextStructOutput[];
  erc1271Policies: PolicyDataStructOutput[];
};

export type SessionStruct = {
  sessionValidator: AddressLike;
  sessionValidatorInitData: BytesLike;
  salt: BytesLike;
  userOpPolicies: PolicyDataStruct[];
  erc7739Policies: ERC7739DataStruct;
  actions: ActionDataStruct[];
  permitERC4337Paymaster: boolean;
};

export type SessionStructOutput = [
  sessionValidator: string,
  sessionValidatorInitData: string,
  salt: string,
  userOpPolicies: PolicyDataStructOutput[],
  erc7739Policies: ERC7739DataStructOutput,
  actions: ActionDataStructOutput[],
  permitERC4337Paymaster: boolean
] & {
  sessionValidator: string;
  sessionValidatorInitData: string;
  salt: string;
  userOpPolicies: PolicyDataStructOutput[];
  erc7739Policies: ERC7739DataStructOutput;
  actions: ActionDataStructOutput[];
  permitERC4337Paymaster: boolean;
};

export type ERC7739ContextHashesStruct = {
  appDomainSeparator: BytesLike;
  contentNameHashes: BytesLike[];
};

export type ERC7739ContextHashesStructOutput = [
  appDomainSeparator: string,
  contentNameHashes: string[]
] & { appDomainSeparator: string; contentNameHashes: string[] };

export type PackedUserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  accountGasLimits: BytesLike;
  preVerificationGas: BigNumberish;
  gasFees: BytesLike;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type PackedUserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  accountGasLimits: string,
  preVerificationGas: bigint,
  gasFees: string,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  accountGasLimits: string;
  preVerificationGas: bigint;
  gasFees: string;
  paymasterAndData: string;
  signature: string;
};

export interface SmartSessionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "areActionsEnabled"
      | "areERC1271PoliciesEnabled"
      | "areUserOpPoliciesEnabled"
      | "disableActionId"
      | "disableActionPolicies"
      | "disableERC1271Policies"
      | "disableUserOpPolicies"
      | "enableActionPolicies"
      | "enableERC1271Policies"
      | "enableSessions"
      | "enableUserOpPolicies"
      | "getActionPolicies"
      | "getERC1271Policies"
      | "getEnabledActions"
      | "getEnabledERC7739Content"
      | "getNonce"
      | "getPermissionIDs"
      | "getPermissionId"
      | "getSessionDigest"
      | "getSessionValidatorAndConfig"
      | "getUserOpPolicies"
      | "isActionIdEnabled"
      | "isActionPolicyEnabled"
      | "isERC1271PolicyEnabled"
      | "isERC7739ContentEnabled"
      | "isISessionValidatorSet"
      | "isInitialized"
      | "isModuleType"
      | "isPermissionEnabled"
      | "isUserOpPolicyEnabled"
      | "isValidSignatureWithSender"
      | "onInstall"
      | "onUninstall"
      | "removeSession"
      | "revokeEnableSignature"
      | "setPermit4337Paymaster"
      | "validateUserOp"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActionIdDisabled"
      | "NonceIterated"
      | "PermissionIdPermit4337Paymaster"
      | "PolicyDisabled"
      | "PolicyEnabled"
      | "SessionCreated"
      | "SessionRemoved"
      | "SessionValidatorDisabled"
      | "SessionValidatorEnabled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "areActionsEnabled",
    values: [AddressLike, BytesLike, ActionDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "areERC1271PoliciesEnabled",
    values: [AddressLike, BytesLike, PolicyDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "areUserOpPoliciesEnabled",
    values: [AddressLike, BytesLike, PolicyDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "disableActionId",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableActionPolicies",
    values: [BytesLike, BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "disableERC1271Policies",
    values: [BytesLike, AddressLike[], ERC7739ContextStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "disableUserOpPolicies",
    values: [BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enableActionPolicies",
    values: [BytesLike, ActionDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enableERC1271Policies",
    values: [BytesLike, ERC7739DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "enableSessions",
    values: [SessionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enableUserOpPolicies",
    values: [BytesLike, PolicyDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionPolicies",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC1271Policies",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnabledActions",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnabledERC7739Content",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionIDs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionId",
    values: [SessionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getSessionDigest",
    values: [BytesLike, AddressLike, SessionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSessionValidatorAndConfig",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOpPolicies",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isActionIdEnabled",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isActionPolicyEnabled",
    values: [AddressLike, BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC1271PolicyEnabled",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC7739ContentEnabled",
    values: [AddressLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isISessionValidatorSet",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPermissionEnabled",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserOpPolicyEnabled",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignatureWithSender",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onInstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onUninstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSession",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeEnableSignature",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermit4337Paymaster",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [PackedUserOperationStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "areActionsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "areERC1271PoliciesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "areUserOpPoliciesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableActionPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableERC1271Policies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableUserOpPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableActionPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableERC1271Policies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableSessions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableUserOpPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC1271Policies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnabledActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnabledERC7739Content",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSessionDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSessionValidatorAndConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOpPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActionIdEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActionPolicyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isERC1271PolicyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isERC7739ContentEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isISessionValidatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isModuleType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserOpPolicyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignatureWithSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onInstall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onUninstall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeEnableSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermit4337Paymaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
}

export namespace ActionIdDisabledEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    actionId: BytesLike,
    smartAccount: AddressLike
  ];
  export type OutputTuple = [
    permissionId: string,
    actionId: string,
    smartAccount: string
  ];
  export interface OutputObject {
    permissionId: string;
    actionId: string;
    smartAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NonceIteratedEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    account: AddressLike,
    newValue: BigNumberish
  ];
  export type OutputTuple = [
    permissionId: string,
    account: string,
    newValue: bigint
  ];
  export interface OutputObject {
    permissionId: string;
    account: string;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionIdPermit4337PaymasterEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    smartAccount: AddressLike,
    enabled: boolean
  ];
  export type OutputTuple = [
    permissionId: string,
    smartAccount: string,
    enabled: boolean
  ];
  export interface OutputObject {
    permissionId: string;
    smartAccount: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyDisabledEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    policyType: BigNumberish,
    policy: AddressLike,
    smartAccount: AddressLike
  ];
  export type OutputTuple = [
    permissionId: string,
    policyType: bigint,
    policy: string,
    smartAccount: string
  ];
  export interface OutputObject {
    permissionId: string;
    policyType: bigint;
    policy: string;
    smartAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyEnabledEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    policyType: BigNumberish,
    policy: AddressLike,
    smartAccount: AddressLike
  ];
  export type OutputTuple = [
    permissionId: string,
    policyType: bigint,
    policy: string,
    smartAccount: string
  ];
  export interface OutputObject {
    permissionId: string;
    policyType: bigint;
    policy: string;
    smartAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionCreatedEvent {
  export type InputTuple = [permissionId: BytesLike, account: AddressLike];
  export type OutputTuple = [permissionId: string, account: string];
  export interface OutputObject {
    permissionId: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionRemovedEvent {
  export type InputTuple = [permissionId: BytesLike, smartAccount: AddressLike];
  export type OutputTuple = [permissionId: string, smartAccount: string];
  export interface OutputObject {
    permissionId: string;
    smartAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionValidatorDisabledEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    sessionValidator: AddressLike,
    smartAccount: AddressLike
  ];
  export type OutputTuple = [
    permissionId: string,
    sessionValidator: string,
    smartAccount: string
  ];
  export interface OutputObject {
    permissionId: string;
    sessionValidator: string;
    smartAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionValidatorEnabledEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    sessionValidator: AddressLike,
    smartAccount: AddressLike
  ];
  export type OutputTuple = [
    permissionId: string,
    sessionValidator: string,
    smartAccount: string
  ];
  export interface OutputObject {
    permissionId: string;
    sessionValidator: string;
    smartAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SmartSession extends BaseContract {
  connect(runner?: ContractRunner | null): SmartSession;
  waitForDeployment(): Promise<this>;

  interface: SmartSessionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  areActionsEnabled: TypedContractMethod<
    [
      account: AddressLike,
      permissionId: BytesLike,
      actions: ActionDataStruct[]
    ],
    [boolean],
    "view"
  >;

  areERC1271PoliciesEnabled: TypedContractMethod<
    [
      account: AddressLike,
      permissionId: BytesLike,
      erc1271Policies: PolicyDataStruct[]
    ],
    [boolean],
    "view"
  >;

  areUserOpPoliciesEnabled: TypedContractMethod<
    [
      account: AddressLike,
      permissionId: BytesLike,
      userOpPolicies: PolicyDataStruct[]
    ],
    [boolean],
    "view"
  >;

  disableActionId: TypedContractMethod<
    [permissionId: BytesLike, actionId: BytesLike],
    [void],
    "nonpayable"
  >;

  disableActionPolicies: TypedContractMethod<
    [permissionId: BytesLike, actionId: BytesLike, policies: AddressLike[]],
    [void],
    "nonpayable"
  >;

  disableERC1271Policies: TypedContractMethod<
    [
      permissionId: BytesLike,
      policies: AddressLike[],
      contexts: ERC7739ContextStruct[]
    ],
    [void],
    "nonpayable"
  >;

  disableUserOpPolicies: TypedContractMethod<
    [permissionId: BytesLike, policies: AddressLike[]],
    [void],
    "nonpayable"
  >;

  enableActionPolicies: TypedContractMethod<
    [permissionId: BytesLike, actionPolicies: ActionDataStruct[]],
    [void],
    "nonpayable"
  >;

  enableERC1271Policies: TypedContractMethod<
    [permissionId: BytesLike, erc1271Policies: ERC7739DataStruct],
    [void],
    "nonpayable"
  >;

  enableSessions: TypedContractMethod<
    [sessions: SessionStruct[]],
    [string[]],
    "nonpayable"
  >;

  enableUserOpPolicies: TypedContractMethod<
    [permissionId: BytesLike, userOpPolicies: PolicyDataStruct[]],
    [void],
    "nonpayable"
  >;

  getActionPolicies: TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike, actionId: BytesLike],
    [string[]],
    "view"
  >;

  getERC1271Policies: TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike],
    [string[]],
    "view"
  >;

  getEnabledActions: TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike],
    [string[]],
    "view"
  >;

  getEnabledERC7739Content: TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike],
    [ERC7739ContextHashesStructOutput[]],
    "view"
  >;

  getNonce: TypedContractMethod<
    [permissionId: BytesLike, account: AddressLike],
    [bigint],
    "view"
  >;

  getPermissionIDs: TypedContractMethod<
    [account: AddressLike],
    [string[]],
    "view"
  >;

  getPermissionId: TypedContractMethod<
    [session: SessionStruct],
    [string],
    "view"
  >;

  getSessionDigest: TypedContractMethod<
    [
      permissionId: BytesLike,
      account: AddressLike,
      data: SessionStruct,
      mode: BigNumberish
    ],
    [string],
    "view"
  >;

  getSessionValidatorAndConfig: TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike],
    [
      [string, string] & {
        sessionValidator: string;
        sessionValidatorData: string;
      }
    ],
    "view"
  >;

  getUserOpPolicies: TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike],
    [string[]],
    "view"
  >;

  isActionIdEnabled: TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike, actionId: BytesLike],
    [boolean],
    "view"
  >;

  isActionPolicyEnabled: TypedContractMethod<
    [
      account: AddressLike,
      permissionId: BytesLike,
      actionId: BytesLike,
      policy: AddressLike
    ],
    [boolean],
    "view"
  >;

  isERC1271PolicyEnabled: TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike, policy: AddressLike],
    [boolean],
    "view"
  >;

  isERC7739ContentEnabled: TypedContractMethod<
    [
      account: AddressLike,
      permissionId: BytesLike,
      appDomainSeparator: BytesLike,
      content: string
    ],
    [boolean],
    "view"
  >;

  isISessionValidatorSet: TypedContractMethod<
    [permissionId: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isInitialized: TypedContractMethod<
    [smartAccount: AddressLike],
    [boolean],
    "view"
  >;

  isModuleType: TypedContractMethod<[typeID: BigNumberish], [boolean], "view">;

  isPermissionEnabled: TypedContractMethod<
    [permissionId: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isUserOpPolicyEnabled: TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike, policy: AddressLike],
    [boolean],
    "view"
  >;

  isValidSignatureWithSender: TypedContractMethod<
    [sender: AddressLike, hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  onInstall: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  onUninstall: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  removeSession: TypedContractMethod<
    [permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeEnableSignature: TypedContractMethod<
    [permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  setPermit4337Paymaster: TypedContractMethod<
    [permissionId: BytesLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  validateUserOp: TypedContractMethod<
    [userOp: PackedUserOperationStruct, userOpHash: BytesLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "areActionsEnabled"
  ): TypedContractMethod<
    [
      account: AddressLike,
      permissionId: BytesLike,
      actions: ActionDataStruct[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "areERC1271PoliciesEnabled"
  ): TypedContractMethod<
    [
      account: AddressLike,
      permissionId: BytesLike,
      erc1271Policies: PolicyDataStruct[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "areUserOpPoliciesEnabled"
  ): TypedContractMethod<
    [
      account: AddressLike,
      permissionId: BytesLike,
      userOpPolicies: PolicyDataStruct[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "disableActionId"
  ): TypedContractMethod<
    [permissionId: BytesLike, actionId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disableActionPolicies"
  ): TypedContractMethod<
    [permissionId: BytesLike, actionId: BytesLike, policies: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disableERC1271Policies"
  ): TypedContractMethod<
    [
      permissionId: BytesLike,
      policies: AddressLike[],
      contexts: ERC7739ContextStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disableUserOpPolicies"
  ): TypedContractMethod<
    [permissionId: BytesLike, policies: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableActionPolicies"
  ): TypedContractMethod<
    [permissionId: BytesLike, actionPolicies: ActionDataStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableERC1271Policies"
  ): TypedContractMethod<
    [permissionId: BytesLike, erc1271Policies: ERC7739DataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableSessions"
  ): TypedContractMethod<[sessions: SessionStruct[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "enableUserOpPolicies"
  ): TypedContractMethod<
    [permissionId: BytesLike, userOpPolicies: PolicyDataStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActionPolicies"
  ): TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike, actionId: BytesLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getERC1271Policies"
  ): TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEnabledActions"
  ): TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEnabledERC7739Content"
  ): TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike],
    [ERC7739ContextHashesStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<
    [permissionId: BytesLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPermissionIDs"
  ): TypedContractMethod<[account: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPermissionId"
  ): TypedContractMethod<[session: SessionStruct], [string], "view">;
  getFunction(
    nameOrSignature: "getSessionDigest"
  ): TypedContractMethod<
    [
      permissionId: BytesLike,
      account: AddressLike,
      data: SessionStruct,
      mode: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSessionValidatorAndConfig"
  ): TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike],
    [
      [string, string] & {
        sessionValidator: string;
        sessionValidatorData: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserOpPolicies"
  ): TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isActionIdEnabled"
  ): TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike, actionId: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isActionPolicyEnabled"
  ): TypedContractMethod<
    [
      account: AddressLike,
      permissionId: BytesLike,
      actionId: BytesLike,
      policy: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isERC1271PolicyEnabled"
  ): TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike, policy: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isERC7739ContentEnabled"
  ): TypedContractMethod<
    [
      account: AddressLike,
      permissionId: BytesLike,
      appDomainSeparator: BytesLike,
      content: string
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isISessionValidatorSet"
  ): TypedContractMethod<
    [permissionId: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[smartAccount: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isModuleType"
  ): TypedContractMethod<[typeID: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPermissionEnabled"
  ): TypedContractMethod<
    [permissionId: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isUserOpPolicyEnabled"
  ): TypedContractMethod<
    [account: AddressLike, permissionId: BytesLike, policy: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSignatureWithSender"
  ): TypedContractMethod<
    [sender: AddressLike, hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onInstall"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onUninstall"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeSession"
  ): TypedContractMethod<[permissionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeEnableSignature"
  ): TypedContractMethod<[permissionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPermit4337Paymaster"
  ): TypedContractMethod<
    [permissionId: BytesLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateUserOp"
  ): TypedContractMethod<
    [userOp: PackedUserOperationStruct, userOpHash: BytesLike],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "ActionIdDisabled"
  ): TypedContractEvent<
    ActionIdDisabledEvent.InputTuple,
    ActionIdDisabledEvent.OutputTuple,
    ActionIdDisabledEvent.OutputObject
  >;
  getEvent(
    key: "NonceIterated"
  ): TypedContractEvent<
    NonceIteratedEvent.InputTuple,
    NonceIteratedEvent.OutputTuple,
    NonceIteratedEvent.OutputObject
  >;
  getEvent(
    key: "PermissionIdPermit4337Paymaster"
  ): TypedContractEvent<
    PermissionIdPermit4337PaymasterEvent.InputTuple,
    PermissionIdPermit4337PaymasterEvent.OutputTuple,
    PermissionIdPermit4337PaymasterEvent.OutputObject
  >;
  getEvent(
    key: "PolicyDisabled"
  ): TypedContractEvent<
    PolicyDisabledEvent.InputTuple,
    PolicyDisabledEvent.OutputTuple,
    PolicyDisabledEvent.OutputObject
  >;
  getEvent(
    key: "PolicyEnabled"
  ): TypedContractEvent<
    PolicyEnabledEvent.InputTuple,
    PolicyEnabledEvent.OutputTuple,
    PolicyEnabledEvent.OutputObject
  >;
  getEvent(
    key: "SessionCreated"
  ): TypedContractEvent<
    SessionCreatedEvent.InputTuple,
    SessionCreatedEvent.OutputTuple,
    SessionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SessionRemoved"
  ): TypedContractEvent<
    SessionRemovedEvent.InputTuple,
    SessionRemovedEvent.OutputTuple,
    SessionRemovedEvent.OutputObject
  >;
  getEvent(
    key: "SessionValidatorDisabled"
  ): TypedContractEvent<
    SessionValidatorDisabledEvent.InputTuple,
    SessionValidatorDisabledEvent.OutputTuple,
    SessionValidatorDisabledEvent.OutputObject
  >;
  getEvent(
    key: "SessionValidatorEnabled"
  ): TypedContractEvent<
    SessionValidatorEnabledEvent.InputTuple,
    SessionValidatorEnabledEvent.OutputTuple,
    SessionValidatorEnabledEvent.OutputObject
  >;

  filters: {
    "ActionIdDisabled(bytes32,bytes32,address)": TypedContractEvent<
      ActionIdDisabledEvent.InputTuple,
      ActionIdDisabledEvent.OutputTuple,
      ActionIdDisabledEvent.OutputObject
    >;
    ActionIdDisabled: TypedContractEvent<
      ActionIdDisabledEvent.InputTuple,
      ActionIdDisabledEvent.OutputTuple,
      ActionIdDisabledEvent.OutputObject
    >;

    "NonceIterated(bytes32,address,uint256)": TypedContractEvent<
      NonceIteratedEvent.InputTuple,
      NonceIteratedEvent.OutputTuple,
      NonceIteratedEvent.OutputObject
    >;
    NonceIterated: TypedContractEvent<
      NonceIteratedEvent.InputTuple,
      NonceIteratedEvent.OutputTuple,
      NonceIteratedEvent.OutputObject
    >;

    "PermissionIdPermit4337Paymaster(bytes32,address,bool)": TypedContractEvent<
      PermissionIdPermit4337PaymasterEvent.InputTuple,
      PermissionIdPermit4337PaymasterEvent.OutputTuple,
      PermissionIdPermit4337PaymasterEvent.OutputObject
    >;
    PermissionIdPermit4337Paymaster: TypedContractEvent<
      PermissionIdPermit4337PaymasterEvent.InputTuple,
      PermissionIdPermit4337PaymasterEvent.OutputTuple,
      PermissionIdPermit4337PaymasterEvent.OutputObject
    >;

    "PolicyDisabled(bytes32,uint8,address,address)": TypedContractEvent<
      PolicyDisabledEvent.InputTuple,
      PolicyDisabledEvent.OutputTuple,
      PolicyDisabledEvent.OutputObject
    >;
    PolicyDisabled: TypedContractEvent<
      PolicyDisabledEvent.InputTuple,
      PolicyDisabledEvent.OutputTuple,
      PolicyDisabledEvent.OutputObject
    >;

    "PolicyEnabled(bytes32,uint8,address,address)": TypedContractEvent<
      PolicyEnabledEvent.InputTuple,
      PolicyEnabledEvent.OutputTuple,
      PolicyEnabledEvent.OutputObject
    >;
    PolicyEnabled: TypedContractEvent<
      PolicyEnabledEvent.InputTuple,
      PolicyEnabledEvent.OutputTuple,
      PolicyEnabledEvent.OutputObject
    >;

    "SessionCreated(bytes32,address)": TypedContractEvent<
      SessionCreatedEvent.InputTuple,
      SessionCreatedEvent.OutputTuple,
      SessionCreatedEvent.OutputObject
    >;
    SessionCreated: TypedContractEvent<
      SessionCreatedEvent.InputTuple,
      SessionCreatedEvent.OutputTuple,
      SessionCreatedEvent.OutputObject
    >;

    "SessionRemoved(bytes32,address)": TypedContractEvent<
      SessionRemovedEvent.InputTuple,
      SessionRemovedEvent.OutputTuple,
      SessionRemovedEvent.OutputObject
    >;
    SessionRemoved: TypedContractEvent<
      SessionRemovedEvent.InputTuple,
      SessionRemovedEvent.OutputTuple,
      SessionRemovedEvent.OutputObject
    >;

    "SessionValidatorDisabled(bytes32,address,address)": TypedContractEvent<
      SessionValidatorDisabledEvent.InputTuple,
      SessionValidatorDisabledEvent.OutputTuple,
      SessionValidatorDisabledEvent.OutputObject
    >;
    SessionValidatorDisabled: TypedContractEvent<
      SessionValidatorDisabledEvent.InputTuple,
      SessionValidatorDisabledEvent.OutputTuple,
      SessionValidatorDisabledEvent.OutputObject
    >;

    "SessionValidatorEnabled(bytes32,address,address)": TypedContractEvent<
      SessionValidatorEnabledEvent.InputTuple,
      SessionValidatorEnabledEvent.OutputTuple,
      SessionValidatorEnabledEvent.OutputObject
    >;
    SessionValidatorEnabled: TypedContractEvent<
      SessionValidatorEnabledEvent.InputTuple,
      SessionValidatorEnabledEvent.OutputTuple,
      SessionValidatorEnabledEvent.OutputObject
    >;
  };
}
