/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ISafe7579,
  ISafe7579Interface,
} from "../../../manual/safe/ISafe7579";

const _abi = [
  {
    type: "function",
    name: "accountId",
    inputs: [],
    outputs: [
      {
        name: "accountImplementationId",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "domainSeparator",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "emergencyUninstallHook",
    inputs: [
      {
        name: "data",
        type: "tuple",
        internalType: "struct EmergencyUninstall",
        components: [
          {
            name: "hook",
            type: "address",
            internalType: "address",
          },
          {
            name: "hookType",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deInitData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "nonce",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "execute",
    inputs: [
      {
        name: "mode",
        type: "bytes32",
        internalType: "ModeCode",
      },
      {
        name: "executionCalldata",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "executeFromExecutor",
    inputs: [
      {
        name: "mode",
        type: "bytes32",
        internalType: "ModeCode",
      },
      {
        name: "executionCalldata",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "returnDatas",
        type: "bytes[]",
        internalType: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getActiveHook",
    inputs: [],
    outputs: [
      {
        name: "hook",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getExecutorsPaginated",
    inputs: [
      {
        name: "cursor",
        type: "address",
        internalType: "address",
      },
      {
        name: "size",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "array",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "next",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getFallbackHandlerBySelector",
    inputs: [
      {
        name: "selector",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes1",
        internalType: "CallType",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getNonce",
    inputs: [
      {
        name: "safe",
        type: "address",
        internalType: "address",
      },
      {
        name: "validator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "nonce",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getPrevalidationHook",
    inputs: [
      {
        name: "moduleType",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "hook",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getSafeOp",
    inputs: [
      {
        name: "userOp",
        type: "tuple",
        internalType: "struct PackedUserOperation",
        components: [
          {
            name: "sender",
            type: "address",
            internalType: "address",
          },
          {
            name: "nonce",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "initCode",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "accountGasLimits",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "preVerificationGas",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "gasFees",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "paymasterAndData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "entryPoint",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "operationData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "validAfter",
        type: "uint48",
        internalType: "uint48",
      },
      {
        name: "validUntil",
        type: "uint48",
        internalType: "uint48",
      },
      {
        name: "signatures",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getValidatorsPaginated",
    inputs: [
      {
        name: "cursor",
        type: "address",
        internalType: "address",
      },
      {
        name: "pageSize",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "array",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "next",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initializeAccount",
    inputs: [
      {
        name: "modules",
        type: "tuple[]",
        internalType: "struct ModuleInit[]",
        components: [
          {
            name: "module",
            type: "address",
            internalType: "address",
          },
          {
            name: "initData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "moduleType",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "registryInit",
        type: "tuple",
        internalType: "struct RegistryInit",
        components: [
          {
            name: "registry",
            type: "address",
            internalType: "contract IERC7484",
          },
          {
            name: "attesters",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "threshold",
            type: "uint8",
            internalType: "uint8",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "initializeAccountWithValidators",
    inputs: [
      {
        name: "validators",
        type: "tuple[]",
        internalType: "struct ModuleInit[]",
        components: [
          {
            name: "module",
            type: "address",
            internalType: "address",
          },
          {
            name: "initData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "moduleType",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "installModule",
    inputs: [
      {
        name: "moduleType",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "module",
        type: "address",
        internalType: "address",
      },
      {
        name: "initData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "isModuleInstalled",
    inputs: [
      {
        name: "moduleType",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "module",
        type: "address",
        internalType: "address",
      },
      {
        name: "additionalContext",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isValidSignature",
    inputs: [
      {
        name: "hash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "magicValue",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setRegistry",
    inputs: [
      {
        name: "registry",
        type: "address",
        internalType: "contract IERC7484",
      },
      {
        name: "attesters",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "threshold",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "supportsExecutionMode",
    inputs: [
      {
        name: "encodedMode",
        type: "bytes32",
        internalType: "ModeCode",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "supportsModule",
    inputs: [
      {
        name: "moduleTypeId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "uninstallModule",
    inputs: [
      {
        name: "moduleType",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "module",
        type: "address",
        internalType: "address",
      },
      {
        name: "deInitData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "validateUserOp",
    inputs: [
      {
        name: "userOp",
        type: "tuple",
        internalType: "struct PackedUserOperation",
        components: [
          {
            name: "sender",
            type: "address",
            internalType: "address",
          },
          {
            name: "nonce",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "initCode",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "accountGasLimits",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "preVerificationGas",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "gasFees",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "paymasterAndData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "userOpHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "missingAccountFunds",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "packedValidSig",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "ERC7484RegistryConfigured",
    inputs: [
      {
        name: "smartAccount",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "registry",
        type: "address",
        indexed: true,
        internalType: "contract IERC7484",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "EmergencyHookUninstallRequest",
    inputs: [
      {
        name: "hook",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "time",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "EmergencyHookUninstallRequestReset",
    inputs: [
      {
        name: "hook",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "time",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ModuleInstalled",
    inputs: [
      {
        name: "moduleTypeId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "module",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ModuleUninstalled",
    inputs: [
      {
        name: "moduleTypeId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "module",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "EmergencyTimeLockNotExpired",
    inputs: [],
  },
  {
    type: "error",
    name: "EmergencyUninstallSigError",
    inputs: [],
  },
  {
    type: "error",
    name: "FallbackInstalled",
    inputs: [
      {
        name: "msgSig",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
  },
  {
    type: "error",
    name: "HookAlreadyInstalled",
    inputs: [
      {
        name: "currentHook",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidCallType",
    inputs: [
      {
        name: "callType",
        type: "bytes1",
        internalType: "CallType",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidFallbackHandler",
    inputs: [
      {
        name: "msgSig",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidHookType",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidInput",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidModule",
    inputs: [
      {
        name: "module",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidModuleType",
    inputs: [
      {
        name: "module",
        type: "address",
        internalType: "address",
      },
      {
        name: "moduleType",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidNonce",
    inputs: [],
  },
  {
    type: "error",
    name: "ModuleNotInstalled",
    inputs: [
      {
        name: "module",
        type: "address",
        internalType: "address",
      },
      {
        name: "moduleType",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "NoFallbackHandler",
    inputs: [
      {
        name: "msgSig",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
  },
  {
    type: "error",
    name: "PreValidationHookAlreadyInstalled",
    inputs: [
      {
        name: "currentHook",
        type: "address",
        internalType: "address",
      },
      {
        name: "moduleType",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "UnsupportedCallType",
    inputs: [
      {
        name: "callType",
        type: "bytes1",
        internalType: "CallType",
      },
    ],
  },
  {
    type: "error",
    name: "UnsupportedExecType",
    inputs: [
      {
        name: "execType",
        type: "bytes1",
        internalType: "ExecType",
      },
    ],
  },
  {
    type: "error",
    name: "UnsupportedModuleType",
    inputs: [
      {
        name: "moduleTypeId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
] as const;

export class ISafe7579__factory {
  static readonly abi = _abi;
  static createInterface(): ISafe7579Interface {
    return new Interface(_abi) as ISafe7579Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): ISafe7579 {
    return new Contract(address, _abi, runner) as unknown as ISafe7579;
  }
}
